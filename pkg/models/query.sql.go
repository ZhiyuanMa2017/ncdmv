// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package models

import (
	"context"
	"time"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointment (
  location, time
) VALUES (
  ?, ?
)
RETURNING id, location, time, create_timestamp
`

type CreateAppointmentParams struct {
	Location string    `json:"location"`
	Time     time.Time `json:"time"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment, arg.Location, arg.Time)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Time,
		&i.CreateTimestamp,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointment
WHERE id = ?
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, id)
	return err
}

const getAppointment = `-- name: GetAppointment :one
SELECT id, location, time, create_timestamp FROM appointment
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAppointment(ctx context.Context, id int64) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointment, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Time,
		&i.CreateTimestamp,
	)
	return i, err
}

const listAppointments = `-- name: ListAppointments :many
SELECT id, location, time, create_timestamp FROM appointment
ORDER BY time DESC
`

func (q *Queries) ListAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, listAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.Location,
			&i.Time,
			&i.CreateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
