// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT OR IGNORE INTO appointment (
  location, time, available
) VALUES (
  ?, ?, ?
)
RETURNING id, location, time, available, create_timestamp
`

type CreateAppointmentParams struct {
	Location  string    `json:"location"`
	Time      time.Time `json:"time"`
	Available bool      `json:"available"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment, arg.Location, arg.Time, arg.Available)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Time,
		&i.Available,
		&i.CreateTimestamp,
	)
	return i, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notification (
  appointment_id, discord_webhook, available
) VALUES (
  ?, ?, ?
)
RETURNING id, appointment_id, discord_webhook, available, create_timestamp
`

type CreateNotificationParams struct {
	AppointmentID  int64          `json:"appointment_id"`
	DiscordWebhook sql.NullString `json:"discord_webhook"`
	Available      bool           `json:"available"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.AppointmentID, arg.DiscordWebhook, arg.Available)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.AppointmentID,
		&i.DiscordWebhook,
		&i.Available,
		&i.CreateTimestamp,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
DELETE FROM appointment
WHERE id = ?
`

func (q *Queries) DeleteAppointment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, id)
	return err
}

const getAppointment = `-- name: GetAppointment :one
SELECT id, location, time, available, create_timestamp FROM appointment
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAppointment(ctx context.Context, id int64) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointment, id)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Time,
		&i.Available,
		&i.CreateTimestamp,
	)
	return i, err
}

const getAppointmentByLocationAndTime = `-- name: GetAppointmentByLocationAndTime :one
SELECT id, location, time, available, create_timestamp FROM appointment
WHERE location = ? AND time = ?
LIMIT 1
`

type GetAppointmentByLocationAndTimeParams struct {
	Location string    `json:"location"`
	Time     time.Time `json:"time"`
}

func (q *Queries) GetAppointmentByLocationAndTime(ctx context.Context, arg GetAppointmentByLocationAndTimeParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentByLocationAndTime, arg.Location, arg.Time)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.Location,
		&i.Time,
		&i.Available,
		&i.CreateTimestamp,
	)
	return i, err
}

const getNotificationCountByAppointment = `-- name: GetNotificationCountByAppointment :one
SELECT COUNT(*) FROM notification
WHERE appointment_id = ? AND discord_webhook = ?
`

type GetNotificationCountByAppointmentParams struct {
	AppointmentID  int64          `json:"appointment_id"`
	DiscordWebhook sql.NullString `json:"discord_webhook"`
}

func (q *Queries) GetNotificationCountByAppointment(ctx context.Context, arg GetNotificationCountByAppointmentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNotificationCountByAppointment, arg.AppointmentID, arg.DiscordWebhook)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listAppointments = `-- name: ListAppointments :many
SELECT id, location, time, available, create_timestamp FROM appointment
ORDER BY time DESC
`

func (q *Queries) ListAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, listAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.Location,
			&i.Time,
			&i.Available,
			&i.CreateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAppointmentsAfterDate = `-- name: ListAppointmentsAfterDate :many
SELECT id, location, time, available, create_timestamp FROM appointment
WHERE time >= ?
ORDER BY time DESC
`

func (q *Queries) ListAppointmentsAfterDate(ctx context.Context, argTime time.Time) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, listAppointmentsAfterDate, argTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.Location,
			&i.Time,
			&i.Available,
			&i.CreateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNotifications = `-- name: ListNotifications :many
SELECT id, appointment_id, discord_webhook, available, create_timestamp FROM notification
`

func (q *Queries) ListNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, listNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.AppointmentID,
			&i.DiscordWebhook,
			&i.Available,
			&i.CreateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pruneAppointmentsBeforeDate = `-- name: PruneAppointmentsBeforeDate :many
UPDATE appointment
SET available = false
WHERE time < ?
RETURNING id, location, time, available, create_timestamp
`

func (q *Queries) PruneAppointmentsBeforeDate(ctx context.Context, argTime time.Time) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, pruneAppointmentsBeforeDate, argTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.Location,
			&i.Time,
			&i.Available,
			&i.CreateTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointmentAvailable = `-- name: UpdateAppointmentAvailable :exec
UPDATE appointment
SET available = ?
WHERE id = ?
`

type UpdateAppointmentAvailableParams struct {
	Available bool  `json:"available"`
	ID        int64 `json:"id"`
}

func (q *Queries) UpdateAppointmentAvailable(ctx context.Context, arg UpdateAppointmentAvailableParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointmentAvailable, arg.Available, arg.ID)
	return err
}
